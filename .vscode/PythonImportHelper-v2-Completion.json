[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "jsmin",
        "importPath": "jsmin",
        "description": "jsmin",
        "isExtraImport": true,
        "detail": "jsmin",
        "documentation": {}
    },
    {
        "label": "compress",
        "importPath": "csscompressor",
        "description": "csscompressor",
        "isExtraImport": true,
        "detail": "csscompressor",
        "documentation": {}
    },
    {
        "label": "minify",
        "importPath": "htmlmin",
        "description": "htmlmin",
        "isExtraImport": true,
        "detail": "htmlmin",
        "documentation": {}
    },
    {
        "label": "jsmin",
        "importPath": "rjsmin",
        "description": "rjsmin",
        "isExtraImport": true,
        "detail": "rjsmin",
        "documentation": {}
    },
    {
        "label": "get_file_type",
        "kind": 2,
        "importPath": "source_merger",
        "description": "source_merger",
        "peekOfCode": "def get_file_type(file_path):\n    \"\"\"\n    Get the file type based on the file extension.\n    Args:\n        file_path (str): The path of the file.\n    Returns:\n        str: The file type.\n    \"\"\"\n    file_type = os.path.splitext(file_path)[1].replace(\".\", \"\")\n    file_types = {",
        "detail": "source_merger",
        "documentation": {}
    },
    {
        "label": "write_file_contents_to_md",
        "kind": 2,
        "importPath": "source_merger",
        "description": "source_merger",
        "peekOfCode": "def write_file_contents_to_md(file_path, md_file, minify):\n    \"\"\"\n    Write the contents of a file to a markdown file.\n    Args:\n        file_path (str): The path of the file.\n        md_file (file): The markdown file to write to.\n        minify (bool): Whether to minify the file contents.\n    \"\"\"\n    file_type = get_file_type(file_path)\n    if not file_type:",
        "detail": "source_merger",
        "documentation": {}
    },
    {
        "label": "minify_file_contents",
        "kind": 2,
        "importPath": "source_merger",
        "description": "source_merger",
        "peekOfCode": "def minify_file_contents(contents, file_type):\n    \"\"\"\n    Minify the contents of a file based on its file type.\n    Args:\n        contents (str): The contents of the file.\n        file_type (str): The file type.\n    Returns:\n        str: The minified contents.\n    \"\"\"\n    if file_type == \"HTML\":",
        "detail": "source_merger",
        "documentation": {}
    },
    {
        "label": "filter_ignored_files",
        "kind": 2,
        "importPath": "source_merger",
        "description": "source_merger",
        "peekOfCode": "def filter_ignored_files(files, ignore_files):\n    \"\"\"\n    Filter out ignored files from a list of files.\n    Args:\n        files (list): The list of files.\n        ignore_files (list): The list of files to ignore.\n    Returns:\n        list: The filtered list of files.\n    \"\"\"\n    return [f for f in files if os.stat(f).st_size != 0 and os.path.basename(f) not in ignore_files]",
        "detail": "source_merger",
        "documentation": {}
    },
    {
        "label": "filter_ignored_directories",
        "kind": 2,
        "importPath": "source_merger",
        "description": "source_merger",
        "peekOfCode": "def filter_ignored_directories(dirs, ignore_dirs):\n    \"\"\"\n    Filter out ignored directories from a list of directories.\n    Args:\n        dirs (list): The list of directories.\n        ignore_dirs (list): The list of directories to ignore.\n    Returns:\n        list: The filtered list of directories.\n    \"\"\"\n    return [d for d in dirs if d not in ignore_dirs]",
        "detail": "source_merger",
        "documentation": {}
    },
    {
        "label": "search_files",
        "kind": 2,
        "importPath": "source_merger",
        "description": "source_merger",
        "peekOfCode": "def search_files(start_dir, ignore_dirs, ignore_files, all_types, extensions, name, minify):\n    \"\"\"\n    Search for files with specific extensions in a directory and its subdirectories,\n    and write their contents to a markdown file.\n    Args:\n        start_dir (str): The directory to start the search from.\n        ignore_dirs (list): The list of directories to ignore.\n        ignore_files (list): The list of files to ignore.\n        all_types (bool): Whether to include all file types.\n        extensions (list): The list of file types to include.",
        "detail": "source_merger",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "source_merger",
        "description": "source_merger",
        "peekOfCode": "def main():\n    \"\"\"\n    The main function that parses command line arguments and calls the search_files function.\n    \"\"\"\n    parser = argparse.ArgumentParser(description='Search for files with specific extensions in a directory and its subdirectories.')\n    parser.add_argument('-i', '--ignore', metavar='ignore', type=str, nargs='+', help='list of directories to ignore')\n    parser.add_argument('-s', '--start_dir', metavar='start_dir', type=str, default='.', help='the directory to start the search from')\n    parser.add_argument('-x', '--ignore_files', metavar='ignore_files', type=str, nargs='+', default=[\"source_merger.py\"], help='list of files to ignore')\n    parser.add_argument('-a', '--all_types', action='store_true', help='include all file types')\n    parser.add_argument('-e', '--extensions', metavar='types', type=str, nargs='+', default=['.html', '.css', '.js', '.ejs', '.py'], help='list of file types to include')",
        "detail": "source_merger",
        "documentation": {}
    }
]